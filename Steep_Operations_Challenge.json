{
  "name": "Steep Operations Challenge",
  "nodes": [
    {
      "parameters": {
        "public": true,
        "initialMessages": "Hi! I'm your spreadsheet assistant. How can I help you?",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -300,
        -580
      ],
      "id": "51a8f4ea-666e-4235-8d0f-89da8d3c7d86",
      "name": "When chat message received",
      "webhookId": "a61efa27-c5fd-48d5-b4b2-b43f6616223b"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -140,
        -400
      ],
      "id": "f69f1995-6ff0-4bae-97b5-4f835714a6e6",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "wl2lUN7ZoOjfzbdU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1120,
        440
      ],
      "id": "23fab181-58b9-47e7-b76a-392b4525e155",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "wl2lUN7ZoOjfzbdU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "messages": {
          "messageValues": [
            {
              "message": "=You are an intelligent agent designed to process user input and organize it into a structured JSON format for interacting with the Google Sheets API. Your task is to interpret the user's input as either a question or a command and generate the appropriate JSON output.\n\nIf the input is a command (e.g., \"Insert Javascript in Rachel's abilities\"), you will output a JSON object with the operation set to 'command' and include the command to be executed to Google Sheets in the appropriate format.\n\nIf the input is a question (e.g., \"What is Daniel's abilities?\"), you will output a JSON object with the operation set to 'question' and include the command to be executed to Google Sheets in the appropriate format.\n\nExamples:\n\nInput: \"Insert Javascript in Rachel's abilities\"\nOutput:\n\n\n{\n  \"operation\": \"command\",\n  \"command to be executed to google sheets\": \"INSERT 'Javascript' INTO 'Rachel' IN 'abilities'\"\n}\nInput: \"What is Daniel's abilities?\"\nOutput:\n\n{\n  \"operation\": \"question\",\n  \"command to be executed to google sheets\": \"SELECT 'abilities' FROM 'Daniel'\"\n}\nGuidelines:\n\nAlways ensure the operation field is set to either 'command' or 'question' based on the user's input.\n\nThe command to be executed to google sheets should be a clear, structured instruction that can be directly used or adapted for the Google Sheets API.\n\nIf the input is ambiguous or unclear, ask for clarification before generating the JSON.\n\nDo not explain, introduce. Only output the JSON."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        -140,
        -580
      ],
      "id": "43121107-2c6c-4a12-977e-800ef4555ebb",
      "name": "Understand Request"
    },
    {
      "parameters": {
        "content": "## Undestand Request",
        "height": 420,
        "width": 820,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -360,
        -680
      ],
      "id": "6400bf6c-160e-4464-b112-e354bce2eedb",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Branch: question or command\n",
        "height": 420,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        460,
        -260
      ],
      "id": "897e52c4-91ab-4e7a-ac5a-c095e2d322cb",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Answer Based on Table Knowledge",
        "height": 400,
        "width": 600,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1000,
        160
      ],
      "id": "4557d3e3-9f4b-409b-97da-76e12f7128a3",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').first().json.chatInput }}",
        "messages": {
          "messageValues": [
            {
              "message": "=You are an AI designed to answer questions based on a provided knowledge base, which consists of structured data in the form of tables. Your primary function is to provide precise and direct answers to queries about the data in the tables. If the requested information is not present in the knowledge base, you must clearly state that the answer cannot be found.\n\nGuidelines for Responses:\n\nPrecision: Provide exact information from the tables when available.\n\nDirectness: Answer concisely without unnecessary elaboration.\n\nUnavailability: If the requested information is not in the knowledge base, respond with: \"The information you are looking for is not available in the knowledge base.\"\n\nExample Queries and Responses:\n\nQuery: What car does Amanda Pereira drive?\nResponse: Amanda Pereira drives a Toyota Corolla.\n\nQuery: What skills does Bruno Santos have?\nResponse: Bruno Santos has skills in Python, n8n, Node.js, Docker, Zapier, Git, MongoDB, and React.\n\nQuery: Where is Camila Rocha from?\nResponse: Camila Rocha is from Belo Horizonte.\n\nQuery: What is Daniel Souza's row number?\nResponse: Daniel Souza's row number is 27.\n\nQuery: What is the population of SÃ£o Paulo?\nResponse: The information you are looking for is not available in the knowledge base.\n\nMAKE SURE TO RESPOND IN THE LANGUAGE OF THE USER PROMPT\n\nYOUR KNOLEDGE BASE IS:\n\n\n{{ JSON.stringify($('Position, Value').item.json.Cells)}}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        1100,
        260
      ],
      "id": "077f7d3d-ec5f-47c3-88e0-463360ff77d5",
      "name": "Answer User"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1080,
        880
      ],
      "id": "b3d08367-1306-4ae5-8f74-ae8ea73cf885",
      "name": "Groq Chat Model2",
      "credentials": {
        "groqApi": {
          "id": "wl2lUN7ZoOjfzbdU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "content": "## Execute Command",
        "height": 400,
        "width": 1140,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1000,
        600
      ],
      "id": "94341118-080f-4a33-b2c9-e0f7e8d64663",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"text\": \"Success! Your command was successfully executed!\" \n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1940,
        640
      ],
      "id": "d60278ac-d3d8-4d02-a356-aa53dc8e6d7b",
      "name": "Command Success"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"text\": \"Something went wrong when executing your command. Could you elaborate on your command better?\"\n  \n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1940,
        800
      ],
      "id": "7efa39fb-bfc3-4044-8d62-c98fde54ea67",
      "name": "Command Error"
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  try {\n    // Attempt to parse the JSON string in the 'text' field\n    const parsedJson = JSON.parse(item.json.text);\n    item.json = parsedJson; // Replace the 'text' field with the parsed JSON object\n  } catch (error) {\n    // If parsing fails, try to extract a JSON-like substring based on '{' and '}'\n    const text = item.json.text;\n    const startIndex = text.indexOf('{');\n    const endIndex = text.lastIndexOf('}');\n\n    if (startIndex !== -1 && endIndex !== -1 && endIndex > startIndex) {\n      const jsonSubstring = text.substring(startIndex, endIndex + 1);\n      try {\n        const parsedJson = JSON.parse(jsonSubstring);\n        item.json = parsedJson; // Replace the 'text' field with the parsed JSON object\n      } catch (subError) {\n        console.error(\"Failed to parse JSON substring:\", jsonSubstring, subError);\n        // Handle the error (e.g., keep the original text or log the issue)\n      }\n    } else {\n      console.error(\"No valid JSON substring found in text:\", text);\n      // Handle the error (e.g., keep the original text or log the issue)\n    }\n  }\n}\n\n// Return the modified input items\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1420,
        700
      ],
      "id": "35c4d147-8361-48d5-8aba-61ed7d28a8bb",
      "name": "Output JSON of Command",
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "for (const item of $input.all()) {\n  try {\n    // Attempt to parse the JSON string in the 'text' field\n    const parsedJson = JSON.parse(item.json.text);\n    item.json = parsedJson; // Replace the 'text' field with the parsed JSON object\n  } catch (error) {\n    // If parsing fails, try to extract a JSON-like substring based on '{' and '}'\n    const text = item.json.text;\n    const startIndex = text.indexOf('{');\n    const endIndex = text.lastIndexOf('}');\n\n    if (startIndex !== -1 && endIndex !== -1 && endIndex > startIndex) {\n      const jsonSubstring = text.substring(startIndex, endIndex + 1);\n      try {\n        const parsedJson = JSON.parse(jsonSubstring);\n        item.json = parsedJson; // Replace the 'text' field with the parsed JSON object\n      } catch (subError) {\n        console.error(\"Failed to parse JSON substring:\", jsonSubstring, subError);\n        // Handle the error (e.g., keep the original text or log the issue)\n      }\n    } else {\n      console.error(\"No valid JSON substring found in text:\", text);\n      // Handle the error (e.g., keep the original text or log the issue)\n    }\n  }\n}\n\n// Return the modified input items\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        -580
      ],
      "id": "cc344062-5c87-4a85-a1bc-eda630849e52",
      "name": "Output JSON of Requisition",
      "executeOnce": false,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"text\": \"Iâm not sure if youâre asking a question or giving a command related to a Google Sheet. Could you clarify?\",\n  \n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        560,
        -560
      ],
      "id": "2bd0ac5a-5481-4656-adb8-230f2e199848",
      "name": "Error on User Request"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"text\": \"Iâm not able to fetch current data of the spreadsheet. Please, contact the support team!\",\n  \n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        740,
        0
      ],
      "id": "1539328e-a7cb-452e-8a7d-6fefbda57974",
      "name": "Error on Data Fetching"
    },
    {
      "parameters": {
        "url": "=https://sheets.googleapis.com/v4/spreadsheets/1yuy0-LjIrqMVlCDEkrOsCXc5Q4b9QTloKnfb1-Xh04Q/values/A1%3AL300",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsTriggerOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "dateTimeRenderOption",
              "value": "FORMATTED_STRING"
            },
            {
              "name": "majorDimension",
              "value": "ROWS"
            },
            {
              "name": "valueRenderOption",
              "value": "FORMATTED_VALUE"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        500,
        -140
      ],
      "id": "a566a3b0-96f1-4816-8045-1ef9cff97ec7",
      "name": "Data Fetching",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "RDFIonMWMz6U8ykJ",
          "name": "Google Sheets Trigger account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "0c787785-1f1c-4630-a870-79205d3be8c4",
              "leftValue": "={{ $('Output JSON of Requisition').first().json.operation }}",
              "rightValue": "question",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        840,
        -160
      ],
      "id": "c29f2c2f-5e80-4da0-aa42-9a622f2281dc",
      "name": "Classify Intention"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "=https://sheets.googleapis.com/v4/spreadsheets/1yuy0-LjIrqMVlCDEkrOsCXc5Q4b9QTloKnfb1-Xh04Q/values/{{$json.cell }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleSheetsTriggerOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "valueInputOption",
              "value": "USER_ENTERED"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"values\": [\n    [\n    {{JSON.stringify( $json.newValue )}}\n    ]\n  ]\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        680
      ],
      "id": "3c88f0be-a2e5-4b3b-be1c-53611028531f",
      "name": "Update Sheet",
      "credentials": {
        "googleSheetsTriggerOAuth2Api": {
          "id": "RDFIonMWMz6U8ykJ",
          "name": "Google Sheets Trigger account"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const values = $input.first().json.values;\n\n// Function to convert column index to letter (e.g., 0 -> 'A', 1 -> 'B', etc.)\nconst columnToLetter = (colIndex) => {\n  return String.fromCharCode(65 + colIndex);\n};\n\n// Main object to hold the cells\nconst Cells = { Cells: {} };\n\n// Iterate through rows and columns\nfor (let rowIndex = 0; rowIndex < values.length; rowIndex++) {\n  const row = values[rowIndex];\n  for (let colIndex = 0; colIndex < row.length; colIndex++) {\n    const cellValue = row[colIndex];\n    if (cellValue.trim()) { // Check if the cell is not empty\n      // Calculate position (e.g., \"C57\")\n      const position = `${columnToLetter(colIndex)}${rowIndex + 1}`;\n      // Add to the Cells object\n      Cells.Cells[position] = { value: cellValue };\n    }\n  }\n}\n\n// Return the Cells object as the output of the node\nreturn Cells;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        -160
      ],
      "id": "75ed9261-f0d4-4bc3-b938-e439acf468d8",
      "name": "Position, Value"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').first().json.chatInput }}",
        "messages": {
          "messageValues": [
            {
              "message": "=You are a precise and reliable assistant designed to interact with a Google Sheet represented as an array of objects. Each object contains the position (e.g., \"A1\", \"B2\") and value of a cell. The first row contains column headers, and each subsequent row represents a single person, with the first column containing their unique ID and the remaining columns containing their attributes.\n\nYour task is to process user commands to change the value of a specific cell. You will identify the person by their unique ID and the attribute (column) to be modified. Once identified, you will output the result in the following JSON format:\n\n{\n  \"cell\": \"CELL_POSITION\",\n  \"newValue\": \"NEW_VALUE\"\n}\n\nUser Input:\nThe user will provide a command to change the value of a specific cell. For example:\n\n\"Change the car of person with ID 201 to Honda Civic.\"\n\n\"Update the city of origin for person 201 to New York.\"\n\nYour Output:\nYou will respond with the JSON object specifying the cell position and the new value. For example:\n\n{\n  \"cell\": \"C2\",\n  \"newValue\": \"Honda Civic\"\n}\n\nInstructions:\n\nIdentify the person by their unique ID.\n\nLocate the row corresponding to the unique ID provided by the user.\n\nLocate the column (attribute) to be modified.\n\nMatch the attribute mentioned in the user's command to the appropriate column header (e.g., \"Car\" or \"City of Origin\").\n\nDetermine the cell position based on the row (person) and column (attribute).\n\nUse the row number of the person and the column letter of the attribute to determine the cell position.\n\nOutput ONLY the result in the specified JSON format.\n\nEnsure the output is strictly in the format:\n\n{\n  \"cell\": \"CELL_POSITION\",\n  \"newValue\": \"NEW_VALUE\"\n}\n\nStrictly adhere to the provided data.\n\nDo not assume or infer any data beyond what is explicitly provided in the knowledge base.\n\nRESPOND ONLY THE JSON OBJECT!!!\n\n\n\nKnowledge Base:\nThe data you will work with is as follows:\n\n\n{{ JSON.stringify($('Position, Value').item.json.Cells)}}\n"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        1060,
        700
      ],
      "id": "8937a19c-e7b1-47b3-9c99-5e7dec160e8a",
      "name": "Identify Position"
    },
    {
      "parameters": {
        "model": "deepseek-r1-distill-llama-70b",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        2440,
        -180
      ],
      "id": "9f95aa2a-a8ca-4a57-bc57-046cfa0b0b1c",
      "name": "Groq Chat Model3",
      "credentials": {
        "groqApi": {
          "id": "wl2lUN7ZoOjfzbdU",
          "name": "Groq account"
        }
      }
    },
    {
      "parameters": {
        "content": "## User Final Answer",
        "height": 400,
        "width": 820,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2320,
        -420
      ],
      "id": "00f1ea6d-cfe2-4aa9-9f41-78db7f781ef9",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('When chat message received').first().json.chatInput }}",
        "messages": {
          "messageValues": [
            {
              "message": "= Your role is to assist users by generating clear, accurate, and understandable responses in their preferred language. When you receive a user prompt and an initial answer, follow these steps to craft the final response:\n\nLanguage Detection: Identify the language of the user's prompt to ensure the final answer is in the same language.\n\nClarity and Simplicity: Simplify complex information, avoid jargon, and ensure the response is easy to understand for the user.\n\nContextual Relevance: Tailor the response to the user's specific query, ensuring it directly addresses their needs or questions.\n\nAccuracy: Verify that the information provided is accurate and up-to-date.\n\nFinal Check: Review the response to ensure it is coherent, concise, and free of errors before delivering it to the user.\n\nYour goal is to provide a fast and precise experience.\n\nDo not explain, do not introduce, only output the response to the user.\n\nAnswer the user based on this data:\n\n{{JSON.stringify($input.all()[0].json.text)}}\n"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.5,
      "position": [
        2440,
        -360
      ],
      "id": "8993b95b-aa3d-4c15-bc81-0bb41206bd08",
      "name": "Final Answer"
    },
    {
      "parameters": {
        "jsCode": "const text = $input.all();\n\n// Regular expression to match <think> tags and their content\nconst regex = /<think>[\\s\\S]*?<\\/think>/g;\n\n// Remove <think> tags and their content\nreturn text.map(item => ({ json: { cleanedText: item.json.text.replace(regex, '') }}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2740,
        -360
      ],
      "id": "ed035e90-b3c5-425a-9d16-411ff77e7bb0",
      "name": "Remove <think>"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"text\":  {{ JSON.stringify($json.cleanedText )}}\n}\n ",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2900,
        -360
      ],
      "id": "7e358b25-157d-4699-a9ed-c09c2ca6ac3e",
      "name": "Final Answer1"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "Understand Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Understand Request",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Answer User",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Understand Request": {
      "main": [
        [
          {
            "node": "Output JSON of Requisition",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Identify Position",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Output JSON of Command": {
      "main": [
        [
          {
            "node": "Update Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Output JSON of Requisition": {
      "main": [
        [
          {
            "node": "Data Fetching",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error on User Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Fetching": {
      "main": [
        [
          {
            "node": "Position, Value",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error on Data Fetching",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Intention": {
      "main": [
        [
          {
            "node": "Answer User",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Identify Position",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Sheet": {
      "main": [
        [
          {
            "node": "Command Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Command Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Position, Value": {
      "main": [
        [
          {
            "node": "Classify Intention",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Identify Position": {
      "main": [
        [
          {
            "node": "Output JSON of Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Answer User": {
      "main": [
        [
          {
            "node": "Final Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Success": {
      "main": [
        [
          {
            "node": "Final Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Error": {
      "main": [
        [
          {
            "node": "Final Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error on Data Fetching": {
      "main": [
        [
          {
            "node": "Final Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error on User Request": {
      "main": [
        [
          {
            "node": "Final Answer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Final Answer",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Final Answer": {
      "main": [
        [
          {
            "node": "Remove <think>",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Remove <think>": {
      "main": [
        [
          {
            "node": "Final Answer1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "daf592ac-e103-40a0-ad0a-e18b5de51d0e",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "2e3338ad622b46a8d0a7ed796a649e83972a8365bcaccebf34d0112b28066e62"
  },
  "id": "eJoS9UR9maqtH5A9",
  "tags": []
}